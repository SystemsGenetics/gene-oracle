manifest {
    mainScript = "main.nf"
    defaultBranch = "master"
    nextflowVersion = ">=21.04"
}



params {
    conda_env = "gene-oracle"
    chunks = 10

    input_dir = "input"
    emx_files = "*.emx.txt"
    labels_files = "*.labels.txt"
    gmt_files = "*.genesets.txt"

    output_dir = "output"

    make_inputs = false

    phase1 = true
    phase1_model = "lr"
    phase1_random_min = 1
    phase1_random_max = 20
    phase1_random_iters = 10
    phase1_threshold = 1
    phase1_nsets = 5

    phase2 = false
    phase2_model = "lr"
    phase2_threshold = 75
    phase2_visualize = true

    phase2_rf = true
    phase2_rf_threshold = 75
    phase2_rf_visualize = true
}



report {
    enabled = true
    file = "${params.output_dir}/reports/report.html"
}



timeline {
    enabled = true
    file = "${params.output_dir}/reports/timeline.html"
}



trace {
    enabled = true
    fields = "task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,vol_ctxt,inv_ctxt,workdir,scratch,error_action"
    file = "${params.output_dir}/reports/trace.txt"
    raw = true
}



docker {
    runOptions = "--init --gpus all"
}



singularity {
    runOptions = "--nv"
    autoMounts = true
}



process {
    container = "systemsgenetics/gene-oracle"

    cpus = 2
    memory = 8.GB
    time = 24.h
}



profiles {
    conda {
        process.beforeScript = "source activate ${params.conda_env}"
    }

    example {
        params.make_inputs = true
    }

    docker {
        docker.enabled = true
    }

    palmetto {
        process.executor = "pbspro"
        executor.queueSize = 50
    }

    singularity {
        singularity.enabled = true
    }

    standard {
        process.executor = "local"
    }

    testing {
        process.errorStrategy = "terminate"
    }
}
